<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="database" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\database.ico;System.Drawing.Icon, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="RecordManagerImage" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\RecordManagerImage.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="RecordManagerImage1" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\RecordManager.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="SynchronizationManagerImage" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\SynchronizationManager.png;System.Drawing.Bitmap, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="SyncManagerIcon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\SyncManagerIcon.ico;System.Drawing.Icon, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="tableTabs_js" xml:space="preserve">
    <value>function selectTab(tabStrip,newBtn,newTab,cssNormal) {
			if( tabStrip.lastTab ) {
				tabStrip.lastTabButton.className = cssNormal;
				tabStrip.lastTab.style.display = 'none';
			}

			newBtn.className = cssSelected;
			newTab.style.display = '';
			tabStrip.lastTabButton = newBtn;
			tabStrip.lastTab = newTab;
		}

		function doHover(cell,cssSelected,cssHover) {
			if(cell.className != cssSelected)
				cell.className = cssHover;
		}

		function doHoverOut(cell,cssSelected,cssNormal) {
			if(cell.className != cssSelected)
				cell.className = cssNormal;
		}</value>
  </data>
  <data name="tabstrip_css_blue" xml:space="preserve">
    <value>.tab-pane {
	WIDTH: 100%; POSITION: relative
}
.dynamic-tab-pane-control .tab_row .tab {
	BORDER-RIGHT: rgb(120,172,255) 1px solid; PADDING-RIGHT: 6px; BORDER-TOP: rgb(120,172,255) 0px solid; DISPLAY: inline; PADDING-LEFT: 6px; FONT-SIZE: 11px; Z-INDEX: 1; BACKGROUND: rgb(234,242,255); FLOAT: left; PADDING-BOTTOM: 3px; MARGIN: 1px -5px 1px 5px; BORDER-LEFT: rgb(120,172,255) 0px solid; CURSOR: pointer; PADDING-TOP: 3px; BORDER-BOTTOM: rgb(120,172,255) 0px solid; FONT-FAMILY: Verdana, Helvetica, Arial; POSITION: relative; TOP: 0px
}
.dynamic-tab-pane-control .tab_row .tab A {
	FONT-SIZE: 10px; CURSOR: pointer; COLOR: rgb(0,66,174); FONT-FAMILY: Arial, Verdana, Helvetica; TEXT-DECORATION: none
}
.dynamic-tab-pane-control .tab_row .tab_selected {
	BORDER-RIGHT: rgb(120,172,255) 1px solid; PADDING-RIGHT: 6px; BORDER-TOP: rgb(120,172,255) 1px solid; PADDING-LEFT: 6px; Z-INDEX: 3; BACKGROUND: white; PADDING-BOTTOM: 5px; MARGIN: 1px -6px -2px 0px; BORDER-LEFT: rgb(120,172,255) 1px solid; PADDING-TOP: 2px; BORDER-BOTTOM: rgb(120,172,255) 0px solid; TOP: -2px
}
.dynamic-tab-pane-control .tab_row .tab_hover A {
	COLOR: rgb(0,66,174); text-decoration: underline;
}
.dynamic-tab-pane-control .tab_row .tab_selected A {
	FONT-WEIGHT: bold;
}
.dynamic-tab-pane-control .tab-page {
	CLEAR: both; BORDER-RIGHT: rgb(120,172,255) 1px solid; PADDING-RIGHT: 10px; BORDER-TOP: rgb(120,172,255) 1px solid; PADDING-LEFT: 10px; FONT-SIZE: 10px; Z-INDEX: 2; BACKGROUND: white; PADDING-BOTTOM: 10px; BORDER-LEFT: rgb(120,172,255) 1px solid; COLOR: black; PADDING-TOP: 10px; BORDER-BOTTOM: rgb(120,172,255) 1px solid; FONT-FAMILY: Verdana, Helvetica, Arial; POSITION: relative; TOP: -2px
}
.dynamic-tab-pane-control .tab_row {
	Z-INDEX: 1; BACKGROUND: rgb(234,242,255); WIDTH: 100%; WHITE-SPACE: nowrap; HEIGHT: 1.5em
}
</value>
  </data>
  <data name="tabstrip_css_gray" xml:space="preserve">
    <value>.tab-pane {
	WIDTH: 100%; POSITION: relative
}
.dynamic-tab-pane-control .tab-row .tab {
	BORDER-RIGHT: threeddarkshadow 1px solid; PADDING-RIGHT: 5px; BORDER-TOP: buttonhighlight 1px solid; DISPLAY: inline; PADDING-LEFT: 5px; Z-INDEX: 1; BACKGROUND: buttonface; FLOAT: left; PADDING-BOTTOM: 3px; MARGIN: 1px -2px 1px 2px; FONT: Menu; BORDER-LEFT: buttonhighlight 1px solid; CURSOR: default; PADDING-TOP: 2px; BORDER-BOTTOM: threeddarkshadow 0px solid; POSITION: relative; TOP: 0px
}
.dynamic-tab-pane-control .tab-row .selected {
	PADDING-RIGHT: 6px; PADDING-LEFT: 7px; Z-INDEX: 3; BORDER-BOTTOM-WIDTH: 0px; PADDING-BOTTOM: 5px; MARGIN: 1px -3px -2px 0px; PADDING-TOP: 2px; TOP: -2px
}
.dynamic-tab-pane-control .tab-row .tab A {
	FONT: Menu; CURSOR: default; COLOR: windowtext; TEXT-DECORATION: none
}
.dynamic-tab-pane-control .tab-row .hover A {
	COLOR: blue
}
.dynamic-tab-pane-control .tab-page {
	CLEAR: both; BORDER-RIGHT: threeddarkshadow 1px solid; PADDING-RIGHT: 10px; BORDER-TOP: buttonhighlight 1px solid; PADDING-LEFT: 10px; Z-INDEX: 2; BACKGROUND: buttonface; PADDING-BOTTOM: 10px; FONT: Message-Box; BORDER-LEFT: buttonhighlight 1px solid; COLOR: windowtext; PADDING-TOP: 10px; BORDER-BOTTOM: threeddarkshadow 1px solid; POSITION: relative; TOP: -2px
}
.dynamic-tab-pane-control .tab-row {
	Z-INDEX: 1; WHITE-SPACE: nowrap
}
</value>
  </data>
  <data name="tabstrip_js" xml:space="preserve">
    <value>/*----------------------------------------------------------------------------\
|                               Tab Pane 1.02                                 |
|-----------------------------------------------------------------------------|
|                         Created by Erik Arvidsson                           |
|                  (http://webfx.eae.net/contact.html#erik)                   |
|                      For WebFX (http://webfx.eae.net/)                      |
|-----------------------------------------------------------------------------|
|                Copyright (c) 2002, 2003, 2006 Erik Arvidsson                |
|-----------------------------------------------------------------------------|
| Licensed under the Apache License, Version 2.0 (the "License"); you may not |
| use this file except in compliance with the License.  You may obtain a copy |
| of the License at http://www.apache.org/licenses/LICENSE-2.0                |
| - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - |
| Unless  required  by  applicable law or  agreed  to  in  writing,  software |
| distributed under the License is distributed on an  "AS IS" BASIS,  WITHOUT |
| WARRANTIES OR  CONDITIONS OF ANY KIND,  either express or implied.  See the |
| License  for the  specific language  governing permissions  and limitations |
| under the License.                                                          |
|-----------------------------------------------------------------------------|
| 2002-01-?? | First working version                                          |
| 2002-02-17 | Cleaned up for 1.0 public version                              |
| 2003-02-18 | Changed from javascript uri for anchors to return false        |
| 2003-03-03 | Added dispose methods to release IE memory                     |
| 2006-05-28 | Changed license to Apache Software License 2.0.                |
|-----------------------------------------------------------------------------|
| NOTICE: Changes by Steve Shortt                                             |
| 2007-12-08 | Added support for multiple styles per tab-row.                 |
|            | Added support for individual tab local "click" handler.        |
|            | Parameterized tab-row class from tab-pane title attribute;     |
|              see HACK notice in WebFXTabPane ctor.                          |
|            | De-hardcoded tab class; persisted in "classSave" prop;         |
|              "classSave" is initialized in WebFXTabPage ctor.               |
|            | Modified show/tabOut functions to use "classSave" prop instead |
|              of regex search for class match.                               |
|            | Modified setupAllTabs to accept/use bUseCookie parm.           |
|            | Modified tabOver/tabOut to ignore "selected" tab.              |
| 2008-01-06 | Added support setting selected tab via tab-pane title;         |
|              see WebFXTabPane ctor HACK.                                    |
|-----------------------------------------------------------------------------|
| Dependencies: *.css           a css file to define the layout               |
|-----------------------------------------------------------------------------|
| Created 2002-01-?? | All changes are in the log above. | Updated 2006-05-28 |
\----------------------------------------------------------------------------*/

// This function is used to define if the browser supports the needed
// features
function hasSupport() {

	if (typeof hasSupport.support != "undefined")
		return hasSupport.support;
	
	var ie55 = /msie 5\.[56789]/i.test( navigator.userAgent );
	
	hasSupport.support = ( typeof document.implementation != "undefined" &amp;&amp;
			document.implementation.hasFeature( "html", "1.0" ) || ie55 )
			
	// IE55 has a serious DOM1 bug... Patch it!
	if ( ie55 ) {
		document._getElementsByTagName = document.getElementsByTagName;
		document.getElementsByTagName = function ( sTagName ) {
			if ( sTagName == "*" )
				return document.all;
			else
				return document._getElementsByTagName( sTagName );
		};
	}

	return hasSupport.support;
}

///////////////////////////////////////////////////////////////////////////////////
// The constructor for tab panes
//
// el : HTMLElement		The html element used to represent the tab pane
// bUseCookie : Boolean	Optional. Default is true. Used to determine whether to us
//						persistance using cookies or not
//
function WebFXTabPane( el, bUseCookie ) {
	if ( !hasSupport() || el == null ) return;
	
	this.element = el;
	this.element.tabPane = this;
	this.pages = [];
	this.selectedIndex = null;
	this.useCookie = bUseCookie != null ? bUseCookie : true;
	
	// add class name tag to class name
	this.element.className = this.classNameTag + " " + this.element.className;

	//HACK: tabRow.className and selectedTabIndex are parameterized from
	//      tabpane 'title' attribute in class!index format. '-1' indicates
	//      to ignore selectedTabIndex value.  used title attribute to ensure
	//      both IE/FF compatibility; 'title' is cleared after use to avoid
	//      display as tooltip.
	// add tab row
	var hack = el.title.split("!");
	
	this.tabRow = document.createElement( "div" );
	this.tabRow.className = hack[0];    //was hardcoded as "tab-row";
	el.insertBefore( this.tabRow, el.firstChild );
	el.title = "";

	var tabIndex = 0;

    if( hack[1] &gt; -1 ) {
	    this.useCookie = false;
	    tabIndex = hack[1];
	}

	if ( this.useCookie ) {
		tabIndex = Number( WebFXTabPane.getCookie( "webfxtab_" + this.element.id ) );
		if ( isNaN( tabIndex ) )
			tabIndex = 0;
	}
	else
	{
		WebFXTabPane.setCookie( "webfxtab_" + this.element.id, tabIndex );	// session cookie
	    this.useCookie = true;
    }
	this.selectedIndex = tabIndex;

	// loop through child nodes and add them
	var cs = el.childNodes;
	var n;
	for (var i = 0; i &lt; cs.length; i++) {
		if (cs[i].nodeType == 1 &amp;&amp; cs[i].className.substr(0,8) == "tab-page") {
			this.addTabPage( cs[i] );
		}
	}
}

WebFXTabPane.prototype.classNameTag = "dynamic-tab-pane-control";

WebFXTabPane.prototype.setSelectedIndex = function ( n ) {
	if (this.selectedIndex != n) {
		if (this.selectedIndex != null &amp;&amp; this.pages[ this.selectedIndex ] != null )
			this.pages[ this.selectedIndex ].hide();
		this.selectedIndex = n;
		this.pages[ this.selectedIndex ].show();
		this.pages[ this.selectedIndex ].tabselected();

		if ( this.useCookie )
			WebFXTabPane.setCookie( "webfxtab_" + this.element.id, n );	// session cookie
	}
};
	
WebFXTabPane.prototype.getSelectedIndex = function () {
	return this.selectedIndex;
};
	
WebFXTabPane.prototype.addTabPage = function ( oElement ) {
	if ( !hasSupport() ) return;
	
	if ( oElement.tabPage == this )	// already added
		return oElement.tabPage;

	var n = this.pages.length;
	var tp = this.pages[n] = new WebFXTabPage( oElement, this, n );
	tp.tabPane = this;
	
	// move the tab out of the box
	this.tabRow.appendChild( tp.tab );
			
	if ( n == this.selectedIndex )
		tp.show();
	else
		tp.hide();
		
	return tp;
};
	
WebFXTabPane.prototype.dispose = function () {
	this.element.tabPane = null;
	this.element = null;		
	this.tabRow = null;
	
	for (var i = 0; i &lt; this.pages.length; i++) {
		this.pages[i].dispose();
		this.pages[i] = null;
	}
	this.pages = null;
};



// Cookie handling
WebFXTabPane.setCookie = function ( sName, sValue, nDays ) {
	var expires = "";
	if ( nDays ) {
		var d = new Date();
		d.setTime( d.getTime() + nDays * 24 * 60 * 60 * 1000 );
		expires = "; expires=" + d.toGMTString();
	}

	document.cookie = sName + "=" + sValue + expires + "; path=/";
};

WebFXTabPane.getCookie = function (sName) {
	var re = new RegExp( "(\;|^)[^;]*(" + sName + ")\=([^;]*)(;|$)" );
	var res = re.exec( document.cookie );
	return res != null ? res[3] : null;
};

WebFXTabPane.removeCookie = function ( name ) {
	setCookie( name, "", -1 );
};








///////////////////////////////////////////////////////////////////////////////////
// The constructor for tab pages. This one should not be used.
// Use WebFXTabPage.addTabPage instead
//
// el : HTMLElement			The html element used to represent the tab pane
// tabPane : WebFXTabPane	The parent tab pane
// nindex :	Number			The index of the page in the parent pane page array
//
function WebFXTabPage( el, tabPane, nIndex ) {
	if ( !hasSupport() || el == null ) return;
	
	this.element = el;
	this.element.tabPage = this;
	this.index = nIndex;
	
	var cs = el.childNodes;
	for (var i = 0; i &lt; cs.length; i++) {
		if (cs[i].nodeType == 1 &amp;&amp; cs[i].className.substr(0,3) == "tab") {
			this.tab = cs[i];
			cs[i].classSave = cs[i].className;
			break;
		}
	}
	
	// insert a tag around content to support keyboard navigation
	
	
	var a = document.createElement( "A" );
	this.aElement = a;
	a.href = "#";
	a.onclick = function () { return false; };
	while ( this.tab.hasChildNodes() )
		a.appendChild( this.tab.firstChild );
	this.tab.appendChild( a );

	
	// hook up events, using DOM0
	var oThis = this;
	this.tab.onclick = function () { oThis.select(); };
	this.tab.onmouseover = function () { WebFXTabPage.tabOver( oThis ); };
	this.tab.onmouseout = function () { WebFXTabPage.tabOut( oThis ); };
}

WebFXTabPage.prototype.show = function () {
	var el = this.tab;
	var s = el.className + " " + el.classSave + "_selected";
	s = s.replace(/ +/g, " ");
	el.className = s;
	
	this.element.style.display = "block";
};

WebFXTabPage.prototype.hide = function () {
	var el = this.tab;
    el.className = el.classSave;
	this.element.style.display = "none";
};
	
WebFXTabPage.tabOver = function ( tabpage ) {
    var el = tabpage.tab;
	var i = el.className.indexOf( " " + el.classSave + "_selected" );
	if( i == -1 ) {
	    var s = el.className + " " + el.classSave + "_hover";
	    s = s.replace(/ +/g, " ");
	    el.className = s;
	}
};

WebFXTabPage.tabOut = function ( tabpage ) {
    var el = tabpage.tab;
    var s = el.className;
	var i = s.indexOf( " " + el.classSave + "_selected" );
	if( i == -1 ) {
        el.className = el.classSave;
    }
};

WebFXTabPage.prototype.tabselected = function () {
    var proxy = document.getElementById( this.element.id + "clickproxy" );
    if( proxy )
        proxy.click();
}

WebFXTabPage.prototype.select = function () {
	this.tabPane.setSelectedIndex( this.index );
};
	
WebFXTabPage.prototype.dispose = function () {
	this.aElement.onclick = null;
	this.aElement = null;
	this.element.tabPage = null;
	this.tab.onclick = null;
	this.tab.onmouseover = null;
	this.tab.onmouseout = null;
	this.tab = null;
	this.tabPane = null;
	this.element = null;
};



// This function initializes all uninitialized tab panes and tab pages
function setupAllTabs( bUseCookie ) {
	if ( !hasSupport() ) return;

	var all = document.getElementsByTagName( "*" );
	var l = all.length;
	var tabPaneRe = /tab\-pane/;
	var tabPageRe = /tab\-page/;
	var cn, el;
	var parentTabPane;
	
	for ( var i = 0; i &lt; l; i++ ) {
		el = all[i]
		cn = el.className;

		// no className
		if ( cn == "" ) continue;
		
		// uninitiated tab pane
		if ( tabPaneRe.test( cn ) &amp;&amp; !el.tabPane )
			new WebFXTabPane( el, bUseCookie );
	
		// unitiated tab page with a valid tab pane parent
		else if ( tabPageRe.test( cn ) &amp;&amp; !el.tabPage &amp;&amp;
					tabPaneRe.test( el.parentNode.className ) ) {
			el.parentNode.tabPane.addTabPage( el );			
		}
	}
}

function disposeAllTabs() {
	if ( !hasSupport() ) return;

	var all = document.getElementsByTagName( "*" );
	var l = all.length;
	var tabPaneRe = /tab\-pane/;
	var cn, el;
	var tabPanes = [];
	
	for ( var i = 0; i &lt; l; i++ ) {
		el = all[i]
		cn = el.className;

		// no className
		if ( cn == "" ) continue;
		
		// tab pane
		if ( tabPaneRe.test( cn ) &amp;&amp; el.tabPane )
			tabPanes[tabPanes.length] = el.tabPane;
	}
	
	for (var i = tabPanes.length - 1; i &gt;= 0; i--) {
		tabPanes[i].dispose();
		tabPanes[i] = null;
	}
}


// initialization hook up

// DOM2
if ( typeof window.addEventListener != "undefined" )
	window.addEventListener( "load", setupAllTabs, false );

// IE 
else if ( typeof window.attachEvent != "undefined" ) {
	window.attachEvent( "onload", setupAllTabs );
	window.attachEvent( "onunload", disposeAllTabs );
}

else {
	if ( window.onload != null ) {
		var oldOnload = window.onload;
		window.onload = function ( e ) {
			oldOnload( e );
			setupAllTabs();
		};
	}
	else 
		window.onload = setupAllTabs;
}
</value>
  </data>
</root>